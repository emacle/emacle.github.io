<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>~振鹭于飞~</title>
    <link>/</link>
    <description>Recent content on ~振鹭于飞~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 17 Jan 2020 10:39:00 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vue token过期无缝刷新</title>
      <link>/posts/vue-token-guo-qi-wu-feng-shua-xin/</link>
      <pubDate>Fri, 17 Jan 2020 10:39:00 +0800</pubDate>
      
      <guid>/posts/vue-token-guo-qi-wu-feng-shua-xin/</guid>
      <description>思路:
  登录时, 后端生成 access_token, refresh_token 返回前端, 前端保存两个token在 cookie或localstorge中
  当前端发送正常请求时,请求头字段携带 access_token , 后端提取该 access_token
 判断是否过期, 不过期则返回 HTTP 200 OK 过期返回 HTTP_UNAUTHORIZED 401, 并且加上自定义响应数据 code = 50014 表示access_token 过期    VUE前端使用 响应拦截器 , 对收到的 HTTP 401 进行拦截, 如果 http 401 且 code =50014 则先以 refresh_token 去获取新 access_token
 如果正常获得 access_token, 则再次以新 access_token 发送原请求, 即可实现无缝刷新 如果 refresh_token 也过期, 则服务器也返回 401, 但是加上了自定义响应数据 code= 50015, 前端的响应拦截器 再次捕获到 error , 校验code =50015后, 则强制退出需要重新登录  // response interceptorservice.</description>
    </item>
    
    <item>
      <title>hugo-dusk theme 模板,utterances评论修改</title>
      <link>/posts/hugo-theme/</link>
      <pubDate>Thu, 16 Jan 2020 09:30:00 +0800</pubDate>
      
      <guid>/posts/hugo-theme/</guid>
      <description>Hugo 以 theme 中的静态模板文件来生成静态css文件
  favicon 图标
[params]# 自定义 favicon 变量 ~/hugo/static/favicon.ico -&amp;gt; /public/favicon.ico# ~/hugo/static/ 目录下的东西会自动发布到时 /public 根目录 i.e. ox-hugo/ orgmode 导出的静态图片# 使用绝对路径 防止 /posts/ 页面404 faviconfavicon = &amp;#34;https://emacle.github.io/favicon.ico&amp;#34;head.html 模板头部加入
&amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;{{ .Site.Params.favicon }}&amp;#34;&amp;gt;  启用 github utterances 评论, 修改.Type 变量, ox-hugo默认导出目录为 &amp;lt;HUGO_BASE_DIR&amp;gt;/content/posts/ 因此 .Type = &amp;ldquo;posts&amp;rdquo;
cat ~/hugo/themes/hugo-dusk/layouts/partials/postfooter.html&amp;lt;footer class=&amp;#34;post-footer&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;post-footer-data&amp;#34;&amp;gt;{{ partial &amp;#34;tags.html&amp;#34; . }}&amp;lt;!--修改默认日期显示格式 --&amp;gt;&amp;lt;!--&amp;lt;div class=&amp;#34;date&amp;#34;&amp;gt; {{ .</description>
    </item>
    
    <item>
      <title>Hugo with OrgMode</title>
      <link>/posts/hugo-with-orgmode/</link>
      <pubDate>Wed, 15 Jan 2020 17:04:00 +0800</pubDate>
      
      <guid>/posts/hugo-with-orgmode/</guid>
      <description>elpa 安装 ox-hugo
  优先使用基于子树模式 两个必填 &amp;lt;hugo_base_dir&amp;gt; 与 EXPORT_FILE_NAME
  org 文件头 设置配置 #+hugo_base_dir 参数指向 hugo 工程目录
#+hugo_base_dir: ../hugo  subtree 属性必须要设置 EXPORT_FILE_NAME 即slug 不可重复, 作为导出的 .md 文件名
:EXPORT_FILE_NAME: hugo-with-orgmode  导出sub-tree到 &amp;lt;HUGO_BASE_DIR&amp;gt;/content/posts/
C-c e H H 或 C-c e H O子树如果是 DONE 则 会直接发布, 如果是 TODO 则会做为草稿
    Sub-tree 属性 EXPORT_HUGO_TAGS 与 EXPORT_HUGO_CATEGORIES
 多个参数以 空格 分隔 会覆盖 orgmode 里的 tags 属性, 留空或不设置则会继承 orgmode tags 以 @ 开头的 orgmode tags 可表示 CATEGORIES  :EXPORT_HUGO_TAGS: hugo haha:EXPORT_HUGO_CATEGORIES: orgmode emacs可不用使用 CATEGORIES 能与 orgmode 保持一致, 前端配置可去除该链接 EXPORT_HUGO_TAGS 也可以留空, 只使用org tags 方式</description>
    </item>
    
    <item>
      <title>raspberry pi 4</title>
      <link>/posts/raspberry-pi-4/</link>
      <pubDate>Mon, 16 Sep 2019 09:34:00 +0800</pubDate>
      
      <guid>/posts/raspberry-pi-4/</guid>
      <description>DONE配置 dhcpcd-run-hook dhcpcd vs /etc/network/interfaces pi 使用 dhcpcd 作为dhcp client 配置 静态IP也在这里进行配置 必须dhcp获取到ip地址后, 执行 frpc 命令, 否则会出现 frpc不能连接自动断开退出的情况
https://blog.csdn.net/yjbaobo/article/details/75146840 这主要是由于版本差异 Debian &amp;lsquo;Jessie&amp;rsquo; in place of Debian &amp;lsquo;Wheezy&amp;rsquo;. 我的是jessie选择修改的是 dhcpcd.conf这个。其中作者也说了如何设置usb无线的配置文件。
#!/bin/sh# /etc/dhcpcd.exit-hook - runs as last dhcpcd hook# man dhcpcd-run-hooks 查看参数 $if_up $interface $reason etcif [ &amp;#34;$interface&amp;#34; = eth0 ] &amp;amp;&amp;amp; [ &amp;#34;$if_up&amp;#34; = true ] ; then# 测试 dhcpcd 变量变化, grep reason /tmp/variables.txt, if_up interface等 测试完成需要关闭防止文件变巨大# echo &amp;#34;================&amp;#34; &amp;gt;&amp;gt; /tmp/variables.</description>
    </item>
    
  </channel>
</rss>