<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>~振鹭于飞~</title>
    <link>/</link>
    <description>Recent content on ~振鹭于飞~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 05 May 2020 21:55:00 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>activiti使用mysql部署及中文不显示解决</title>
      <link>/posts/activiti-shi-yong-mysql-bu-shu-ji-zhong-wen-bu-xian-shi-jie-jue/</link>
      <pubDate>Tue, 05 May 2020 21:55:00 +0800</pubDate>
      
      <guid>/posts/activiti-shi-yong-mysql-bu-shu-ji-zhong-wen-bu-xian-shi-jie-jue/</guid>
      <description>官网下载 activiti-6.0.0.zip 包解压 将wars/目录下 activiti-app.war, activiti-rest.war 包放入apache-tomcat-9.0.30/webapps目录下  apache-tomcat-9.0.30/bin/catalina.bat start # 启动 tomcat，stop自动解压war包并布署，webapps/ 下生成两个目录 activiti-app/ , activity-rest/
 activiti-app 会创建用户 admin 密码 test activiti-rest 会创建用户 fozzie gonzo kermit 密码同用户名 测试activiti-app http://localhost:8080/activiti-app/ admin:test 测试activiti-rest http://localhost:8080/activiti-rest/docs/ swagger文档 kermit:kermit http://kermit:kermit@localhost:8080/activiti-rest/service/management/engine 必须使用用户名密码进行 basic auth  默认使用H2内存数据库，数据不能持久化，mysql库替换，这里使用的mysql库是v8.0.12
  新建数据库名 activiti6ui
  下载相应mysql-connector-java-8.0.12.jar包放入apache-tomcat-9.0.30/lib/, 重命名mysql-connector-java.jar 可选
  activiti-app修改mysql连接配置
cat apache-tomcat-9.0.30\webapps\activiti-app\WEB-INF\classes\META-INF\activiti-app\activiti-app.properties
datasource.driver=com.mysql.jdbc.Driverdatasource.url=jdbc:mysql://127.0.0.1:3306/activiti6ui?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;autoReconnect=true&amp;amp;failOverReadOnly=false&amp;amp;serverTimezone=GMT%2B8&amp;amp;nullCatalogMeansCurrent=truedatasource.username=rootdatasource.password=roothibernate.dialect=org.hibernate.dialect.MySQLDialect注意: &amp;amp;nullCatalogMeansCurrent=true参数 必须是要带的，否则创建表时会出错 大坑
  activiti-rest修改mysql连接配置</description>
    </item>
    
    <item>
      <title>OAuth 2 Authorization Code Grant Flow</title>
      <link>/posts/oauth-2-authorization-code-grant-flow/</link>
      <pubDate>Mon, 09 Mar 2020 10:37:00 +0800</pubDate>
      
      <guid>/posts/oauth-2-authorization-code-grant-flow/</guid>
      <description>转自 OAuth 2.0 筆記 (4.1) Authorization Code Grant Flow 細節
在 Authorization Grant Code Flow 裡，Client 不直接向 Resource Owner 要求許可，而是把 Resource Owner 導去 Authorization Server 要求許可， Authorization Server 再透過轉址來告訴 Client 授權許可的代碼 (code) 。 在轉址回去之前， Authorization Server 會先認證 Resource Owner 並取得授權。因為 Resource Owner 只跟 Authorization Server 認證，所以 Client 絕對不會拿到 Resource Owner 的帳號密碼。
    註: (A), (B), (C) 這三步的線拆成兩段，因為會經過 user-agent 其 Client 指自己的应用程序（包括前端及后端api） User-Agent 一般指流览器
 (D) 步 客户端向 authorization server 发送 auth_code 时(手工封装时) 未带有redirect_uri貌似也能成功最好还是按标准带上该参数？  使用 oauth2-client 包时应该是封装好的 authorization_code 与 前面定义的 redirect_uri 一同发向 authorization server</description>
    </item>
    
    <item>
      <title>Vue Element-ui Github oAuth 三方登录</title>
      <link>/posts/vue-element-ui-github-oauth-san-fang-deng-lu/</link>
      <pubDate>Fri, 06 Mar 2020 11:42:00 +0800</pubDate>
      
      <guid>/posts/vue-element-ui-github-oauth-san-fang-deng-lu/</guid>
      <description>Github 网站创建 OAuth Apps 记录 Client ID / Client Secret / Authorization Callback URL 3个参数 此处 Authorization Callback URL 为默认回调网址，程序代码里没有明确指定的话，以此为默认值，代码里指定的话 指定的redirect 一定要与此处一致防止提交时校验出错 ip/域名都可，在弹出子窗口进行授权确定时，三方服务器会校验 url里的redirect参数(程序里指定的)与创建三方应用里指定的 callback 地址，如果不一致会出错
http://host:port/auth-redirect # 必须与创建应用时填入值一致http://localhost:9527/auth-redirecthttp://172.17.1.110:10000/auth-redirecthttp://www.vueauth.org:10000/auth-redirect # 浏览器的主机 hosts/dns 里需要解析 www.vueauth.org    socialsignin.vue 三方登录模块里，构造弹出窗口 github 认证 url
githubHandleClick(thirdpart) {// 1. 指定授权 client_id 及 redirect_uri 的 URL // 如果不指定 redirect_uri, 则默认使用 gihtub =&amp;gt; Settings =&amp;gt; Developer settings =&amp;gt; OAuth Apps 里 Authorization callback URL 配置的地址 // 为了无歧义尽量在程序代码里指定redirect_uri // const url = &amp;#39;https://github.</description>
    </item>
    
    <item>
      <title>vue token过期无缝刷新</title>
      <link>/posts/vue-token-guo-qi-wu-feng-shua-xin/</link>
      <pubDate>Fri, 17 Jan 2020 10:39:00 +0800</pubDate>
      
      <guid>/posts/vue-token-guo-qi-wu-feng-shua-xin/</guid>
      <description>过期刷新流程图: 
思路:
  登录时, 后端生成 access_token, refresh_token 返回前端, 前端保存两个token在 cookie或localstorge中
  当前端发送正常请求时,请求头字段携带 access_token , 后端提取该 access_token
 判断是否过期, 不过期则返回 HTTP 200 OK 过期返回 HTTP_UNAUTHORIZED 401, 并且加上自定义响应数据 code = 50014 表示access_token 过期    VUE前端使用 响应拦截器 , 对收到的 HTTP 401 进行拦截, 如果 http 401 且 code =50014 则先以 refresh_token 去获取新 access_token
 如果正常获得 access_token, 则再次以新 access_token 发送原请求, 即可实现无缝刷新 如果 refresh_token 也过期, 则服务器也返回 401, 但是加上了自定义响应数据 code= 50015, 前端的响应拦截器 再次捕获到 error , 校验code =50015后, 则强制退出需要重新登录  // response interceptorservice.</description>
    </item>
    
    <item>
      <title>hugo-dusk theme 模板,utterances评论修改</title>
      <link>/posts/hugo-theme/</link>
      <pubDate>Thu, 16 Jan 2020 09:30:00 +0800</pubDate>
      
      <guid>/posts/hugo-theme/</guid>
      <description>Hugo 以 theme 中的静态模板文件来生成静态css文件
  favicon 图标
[params]# 自定义 favicon 变量 ~/hugo/static/favicon.ico -&amp;gt; /public/favicon.ico# ~/hugo/static/ 目录下的东西会自动发布到时 /public 根目录 i.e. ox-hugo/ orgmode 导出的静态图片# 使用绝对路径 防止 /posts/ 页面404 faviconfavicon = &amp;#34;https://emacle.github.io/favicon.ico&amp;#34;head.html 模板头部加入
&amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;{{ .Site.Params.favicon }}&amp;#34;&amp;gt;  启用 github utterances 评论, 修改.Type 变量, ox-hugo默认导出目录为 &amp;lt;HUGO_BASE_DIR&amp;gt;/content/posts/ 因此 .Type = &amp;ldquo;posts&amp;rdquo;
cat ~/hugo/themes/hugo-dusk/layouts/partials/postfooter.html&amp;lt;footer class=&amp;#34;post-footer&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;post-footer-data&amp;#34;&amp;gt;{{ partial &amp;#34;tags.html&amp;#34; . }}&amp;lt;!--修改默认日期显示格式 --&amp;gt;&amp;lt;!--&amp;lt;div class=&amp;#34;date&amp;#34;&amp;gt; {{ .</description>
    </item>
    
    <item>
      <title>Hugo with OrgMode</title>
      <link>/posts/hugo-with-orgmode/</link>
      <pubDate>Wed, 15 Jan 2020 17:04:00 +0800</pubDate>
      
      <guid>/posts/hugo-with-orgmode/</guid>
      <description>elpa 安装 ox-hugo
  优先使用基于子树模式 两个必填 &amp;lt;hugo_base_dir&amp;gt; 与 EXPORT_FILE_NAME
  org 文件头 设置配置 #+hugo_base_dir 参数指向 hugo 工程目录
#+hugo_base_dir: ../hugo  subtree 属性必须要设置 EXPORT_FILE_NAME 即slug 不可重复, 作为导出的 .md 文件名
:EXPORT_FILE_NAME: hugo-with-orgmode  导出sub-tree到 &amp;lt;HUGO_BASE_DIR&amp;gt;/content/posts/
C-c e H H 或 C-c e H O子树如果是 DONE 则 会直接发布, 如果是 TODO 则会做为草稿
    Sub-tree 属性 EXPORT_HUGO_TAGS 与 EXPORT_HUGO_CATEGORIES
  多个参数以 空格 分隔
  会覆盖 orgmode 里的 tags 属性, 留空或不设置则会继承 orgmode tags</description>
    </item>
    
    <item>
      <title>raspberry pi 4</title>
      <link>/posts/raspberry-pi-4/</link>
      <pubDate>Mon, 16 Sep 2019 09:34:00 +0800</pubDate>
      
      <guid>/posts/raspberry-pi-4/</guid>
      <description>DONE配置 dhcpcd-run-hook dhcpcd vs /etc/network/interfaces pi 使用 dhcpcd 作为dhcp client 配置 静态IP也在这里进行配置 必须dhcp获取到ip地址后, 执行 frpc 命令, 否则会出现 frpc不能连接自动断开退出的情况
https://blog.csdn.net/yjbaobo/article/details/75146840 这主要是由于版本差异 Debian &amp;lsquo;Jessie&amp;rsquo; in place of Debian &amp;lsquo;Wheezy&amp;rsquo;. 我的是jessie选择修改的是 dhcpcd.conf这个。其中作者也说了如何设置usb无线的配置文件。
#!/bin/sh# /etc/dhcpcd.exit-hook - runs as last dhcpcd hook# man dhcpcd-run-hooks 查看参数 $if_up $interface $reason etcif [ &amp;#34;$interface&amp;#34; = eth0 ] &amp;amp;&amp;amp; [ &amp;#34;$if_up&amp;#34; = true ] ; then# 测试 dhcpcd 变量变化, grep reason /tmp/variables.txt, if_up interface等 测试完成需要关闭防止文件变巨大# echo &amp;#34;================&amp;#34; &amp;gt;&amp;gt; /tmp/variables.</description>
    </item>
    
  </channel>
</rss>